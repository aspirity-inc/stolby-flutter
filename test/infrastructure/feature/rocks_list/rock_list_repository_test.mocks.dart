// Mocks generated by Mockito 5.0.16 from annotations
// in stolby_flutter/test/infrastructure/feature/rocks_list/rock_list_repository_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;

import 'package:drift/drift.dart' as _i3;
import 'package:drift/src/runtime/executor/stream_queries.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:stolby_flutter/infrastructure/services/local/database/app_database.dart'
    as _i2;
import 'package:stolby_flutter/infrastructure/services/local/database/views/rocks_coordinates_list_view.dart'
    as _i8;
import 'package:stolby_flutter/infrastructure/services/local/database/views/rocks_list_view.dart'
    as _i7;
import 'package:stolby_flutter/infrastructure/services/local/database/views/single_rock_view.dart'
    as _i5;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _Fake$RocksTable_0 extends _i1.Fake implements _i2.$RocksTable {}

class _Fake$RocksLocalizedTable_1 extends _i1.Fake
    implements _i2.$RocksLocalizedTable {}

class _FakeGeneratedDatabase_2 extends _i1.Fake
    implements _i3.GeneratedDatabase {}

class _FakeMigrationStrategy_3 extends _i1.Fake
    implements _i3.MigrationStrategy {}

class _FakeStreamQueryUpdateRules_4 extends _i1.Fake
    implements _i3.StreamQueryUpdateRules {}

class _FakeDatabaseConnection_5 extends _i1.Fake
    implements _i3.DatabaseConnection {}

class _FakeSqlTypeSystem_6 extends _i1.Fake implements _i3.SqlTypeSystem {}

class _FakeQueryExecutor_7 extends _i1.Fake implements _i3.QueryExecutor {}

class _FakeStreamQueryStore_8 extends _i1.Fake implements _i4.StreamQueryStore {
}

class _FakeDatabaseConnectionUser_9 extends _i1.Fake
    implements _i3.DatabaseConnectionUser {}

class _FakeSingleRockView_10 extends _i1.Fake implements _i5.SingleRockView {}

class _FakeMigrator_11 extends _i1.Fake implements _i3.Migrator {}

class _FakeInsertStatement_12<T extends _i3.Table, D> extends _i1.Fake
    implements _i3.InsertStatement<T, D> {}

class _FakeUpdateStatement_13<T extends _i3.Table, D> extends _i1.Fake
    implements _i3.UpdateStatement<T, D> {}

class _FakeSimpleSelectStatement_14<T extends _i3.HasResultSet, D>
    extends _i1.Fake implements _i3.SimpleSelectStatement<T, D> {}

class _FakeJoinedSelectStatement_15<FirstT extends _i3.HasResultSet, FirstD>
    extends _i1.Fake implements _i3.JoinedSelectStatement<FirstT, FirstD> {}

class _FakeDeleteStatement_16<T extends _i3.Table, D> extends _i1.Fake
    implements _i3.DeleteStatement<T, D> {}

class _FakeSelectable_17<T> extends _i1.Fake implements _i3.Selectable<T> {}

class _FakeGenerationContext_18 extends _i1.Fake
    implements _i3.GenerationContext {}

/// A class which mocks [AppDatabase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppDatabase extends _i1.Mock implements _i2.AppDatabase {
  MockAppDatabase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get schemaVersion =>
      (super.noSuchMethod(Invocation.getter(#schemaVersion), returnValue: 0)
          as int);
  @override
  _i2.$RocksTable get rocks => (super.noSuchMethod(Invocation.getter(#rocks),
      returnValue: _Fake$RocksTable_0()) as _i2.$RocksTable);
  @override
  _i2.$RocksLocalizedTable get rocksLocalized => (super.noSuchMethod(
      Invocation.getter(#rocksLocalized),
      returnValue: _Fake$RocksLocalizedTable_1()) as _i2.$RocksLocalizedTable);
  @override
  Iterable<_i3.TableInfo<_i3.Table, dynamic>> get allTables =>
      (super.noSuchMethod(Invocation.getter(#allTables),
              returnValue: <_i3.TableInfo<_i3.Table, dynamic>>[])
          as Iterable<_i3.TableInfo<_i3.Table, dynamic>>);
  @override
  List<_i3.DatabaseSchemaEntity> get allSchemaEntities =>
      (super.noSuchMethod(Invocation.getter(#allSchemaEntities),
              returnValue: <_i3.DatabaseSchemaEntity>[])
          as List<_i3.DatabaseSchemaEntity>);
  @override
  _i3.GeneratedDatabase get attachedDatabase =>
      (super.noSuchMethod(Invocation.getter(#attachedDatabase),
          returnValue: _FakeGeneratedDatabase_2()) as _i3.GeneratedDatabase);
  @override
  _i3.MigrationStrategy get migration =>
      (super.noSuchMethod(Invocation.getter(#migration),
          returnValue: _FakeMigrationStrategy_3()) as _i3.MigrationStrategy);
  @override
  _i3.StreamQueryUpdateRules get streamUpdateRules =>
      (super.noSuchMethod(Invocation.getter(#streamUpdateRules),
              returnValue: _FakeStreamQueryUpdateRules_4())
          as _i3.StreamQueryUpdateRules);
  @override
  _i3.DatabaseConnection get connection =>
      (super.noSuchMethod(Invocation.getter(#connection),
          returnValue: _FakeDatabaseConnection_5()) as _i3.DatabaseConnection);
  @override
  _i3.SqlTypeSystem get typeSystem =>
      (super.noSuchMethod(Invocation.getter(#typeSystem),
          returnValue: _FakeSqlTypeSystem_6()) as _i3.SqlTypeSystem);
  @override
  _i3.QueryExecutor get executor =>
      (super.noSuchMethod(Invocation.getter(#executor),
          returnValue: _FakeQueryExecutor_7()) as _i3.QueryExecutor);
  @override
  _i4.StreamQueryStore get streamQueries =>
      (super.noSuchMethod(Invocation.getter(#streamQueries),
          returnValue: _FakeStreamQueryStore_8()) as _i4.StreamQueryStore);
  @override
  _i3.DatabaseConnectionUser get resolvedEngine =>
      (super.noSuchMethod(Invocation.getter(#resolvedEngine),
              returnValue: _FakeDatabaseConnectionUser_9())
          as _i3.DatabaseConnectionUser);
  @override
  _i6.Future<List<_i7.RocksListView>> getRocksList(String? language) =>
      (super.noSuchMethod(Invocation.method(#getRocksList, [language]),
              returnValue:
                  Future<List<_i7.RocksListView>>.value(<_i7.RocksListView>[]))
          as _i6.Future<List<_i7.RocksListView>>);
  @override
  _i6.Future<List<_i8.RocksCoordinatesListView>> getRocksCoordinatesList(
          String? language) =>
      (super.noSuchMethod(
              Invocation.method(#getRocksCoordinatesList, [language]),
              returnValue: Future<List<_i8.RocksCoordinatesListView>>.value(
                  <_i8.RocksCoordinatesListView>[]))
          as _i6.Future<List<_i8.RocksCoordinatesListView>>);
  @override
  _i6.Future<_i5.SingleRockView> getSingleRock(String? language, int? id) =>
      (super.noSuchMethod(Invocation.method(#getSingleRock, [language, id]),
              returnValue:
                  Future<_i5.SingleRockView>.value(_FakeSingleRockView_10()))
          as _i6.Future<_i5.SingleRockView>);
  @override
  _i3.Migrator createMigrator() =>
      (super.noSuchMethod(Invocation.method(#createMigrator, []),
          returnValue: _FakeMigrator_11()) as _i3.Migrator);
  @override
  _i6.Future<void> beforeOpen(
          _i3.QueryExecutor? executor, _i3.OpeningDetails? details) =>
      (super.noSuchMethod(Invocation.method(#beforeOpen, [executor, details]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Stream<List<Map<String, Object?>>> createStream(
          _i4.QueryStreamFetcher? stmt) =>
      (super.noSuchMethod(Invocation.method(#createStream, [stmt]),
              returnValue: Stream<List<Map<String, Object?>>>.empty())
          as _i6.Stream<List<Map<String, Object?>>>);
  @override
  T alias<T extends _i3.Table, D>(_i3.TableInfo<T, D>? table, String? alias) =>
      (super.noSuchMethod(Invocation.method(#alias, [table, alias]),
          returnValue: null) as T);
  @override
  void markTablesUpdated(Iterable<_i3.TableInfo<_i3.Table, dynamic>>? tables) =>
      super.noSuchMethod(Invocation.method(#markTablesUpdated, [tables]),
          returnValueForMissingStub: null);
  @override
  void notifyUpdates(Set<_i3.TableUpdate>? updates) =>
      super.noSuchMethod(Invocation.method(#notifyUpdates, [updates]),
          returnValueForMissingStub: null);
  @override
  _i6.Stream<Set<_i3.TableUpdate>> tableUpdates(
          [_i3.TableUpdateQuery? query = const _i3.TableUpdateQuery.any()]) =>
      (super.noSuchMethod(Invocation.method(#tableUpdates, [query]),
              returnValue: Stream<Set<_i3.TableUpdate>>.empty())
          as _i6.Stream<Set<_i3.TableUpdate>>);
  @override
  _i6.Future<T> doWhenOpened<T>(
          _i6.FutureOr<T>? Function(_i3.QueryExecutor)? fn) =>
      (super.noSuchMethod(Invocation.method(#doWhenOpened, [fn]),
          returnValue: Future<T>.value(null)) as _i6.Future<T>);
  @override
  _i3.InsertStatement<T, D> into<T extends _i3.Table, D>(
          _i3.TableInfo<T, D>? table) =>
      (super.noSuchMethod(Invocation.method(#into, [table]),
              returnValue: _FakeInsertStatement_12<T, D>())
          as _i3.InsertStatement<T, D>);
  @override
  _i3.UpdateStatement<Tbl, R> update<Tbl extends _i3.Table, R>(
          _i3.TableInfo<Tbl, R>? table) =>
      (super.noSuchMethod(Invocation.method(#update, [table]),
              returnValue: _FakeUpdateStatement_13<Tbl, R>())
          as _i3.UpdateStatement<Tbl, R>);
  @override
  _i3.SimpleSelectStatement<T, R> select<T extends _i3.HasResultSet, R>(
          _i3.ResultSetImplementation<T, R>? table,
          {bool? distinct = false}) =>
      (super.noSuchMethod(
              Invocation.method(#select, [table], {#distinct: distinct}),
              returnValue: _FakeSimpleSelectStatement_14<T, R>())
          as _i3.SimpleSelectStatement<T, R>);
  @override
  _i3.JoinedSelectStatement<T, R> selectOnly<T extends _i3.HasResultSet, R>(
          _i3.ResultSetImplementation<T, R>? table,
          {bool? distinct = false,
          bool? includeJoinedTableColumns = true}) =>
      (super.noSuchMethod(
              Invocation.method(#selectOnly, [
                table
              ], {
                #distinct: distinct,
                #includeJoinedTableColumns: includeJoinedTableColumns
              }),
              returnValue: _FakeJoinedSelectStatement_15<T, R>())
          as _i3.JoinedSelectStatement<T, R>);
  @override
  _i3.DeleteStatement<T, D> delete<T extends _i3.Table, D>(
          _i3.TableInfo<T, D>? table) =>
      (super.noSuchMethod(Invocation.method(#delete, [table]),
              returnValue: _FakeDeleteStatement_16<T, D>())
          as _i3.DeleteStatement<T, D>);
  @override
  _i6.Future<int> customUpdate(String? query,
          {List<_i3.Variable<dynamic>>? variables = const [],
          Set<_i3.TableInfo<_i3.Table, dynamic>>? updates,
          _i3.UpdateKind? updateKind}) =>
      (super.noSuchMethod(
          Invocation.method(#customUpdate, [
            query
          ], {
            #variables: variables,
            #updates: updates,
            #updateKind: updateKind
          }),
          returnValue: Future<int>.value(0)) as _i6.Future<int>);
  @override
  _i6.Future<int> customInsert(String? query,
          {List<_i3.Variable<dynamic>>? variables = const [],
          Set<_i3.TableInfo<_i3.Table, dynamic>>? updates}) =>
      (super.noSuchMethod(
          Invocation.method(#customInsert, [query],
              {#variables: variables, #updates: updates}),
          returnValue: Future<int>.value(0)) as _i6.Future<int>);
  @override
  _i6.Future<List<_i3.QueryRow>> customWriteReturning(String? query,
          {List<_i3.Variable<dynamic>>? variables = const [],
          Set<_i3.TableInfo<_i3.Table, dynamic>>? updates,
          _i3.UpdateKind? updateKind}) =>
      (super.noSuchMethod(
              Invocation.method(#customWriteReturning, [
                query
              ], {
                #variables: variables,
                #updates: updates,
                #updateKind: updateKind
              }),
              returnValue: Future<List<_i3.QueryRow>>.value(<_i3.QueryRow>[]))
          as _i6.Future<List<_i3.QueryRow>>);
  @override
  _i3.Selectable<_i3.QueryRow> customSelect(String? query,
          {List<_i3.Variable<dynamic>>? variables = const [],
          Set<_i3.ResultSetImplementation<dynamic, dynamic>>? readsFrom =
              const {}}) =>
      (super.noSuchMethod(
              Invocation.method(#customSelect, [query],
                  {#variables: variables, #readsFrom: readsFrom}),
              returnValue: _FakeSelectable_17<_i3.QueryRow>())
          as _i3.Selectable<_i3.QueryRow>);
  @override
  _i3.Selectable<_i3.QueryRow> customSelectQuery(String? query,
          {List<_i3.Variable<dynamic>>? variables = const [],
          Set<_i3.ResultSetImplementation<dynamic, dynamic>>? readsFrom =
              const {}}) =>
      (super.noSuchMethod(
              Invocation.method(#customSelectQuery, [query],
                  {#variables: variables, #readsFrom: readsFrom}),
              returnValue: _FakeSelectable_17<_i3.QueryRow>())
          as _i3.Selectable<_i3.QueryRow>);
  @override
  _i6.Future<void> customStatement(String? statement, [List<dynamic>? args]) =>
      (super.noSuchMethod(
          Invocation.method(#customStatement, [statement, args]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<T> transaction<T>(_i6.Future<T> Function()? action) =>
      (super.noSuchMethod(Invocation.method(#transaction, [action]),
          returnValue: Future<T>.value(null)) as _i6.Future<T>);
  @override
  _i6.Future<void> batch(_i6.FutureOr<void>? Function(_i3.Batch)? runInBatch) =>
      (super.noSuchMethod(Invocation.method(#batch, [runInBatch]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i3.GenerationContext $write(_i3.Component? component,
          {bool? hasMultipleTables, int? startIndex}) =>
      (super.noSuchMethod(
          Invocation.method(#$write, [component],
              {#hasMultipleTables: hasMultipleTables, #startIndex: startIndex}),
          returnValue: _FakeGenerationContext_18()) as _i3.GenerationContext);
  @override
  _i3.GenerationContext $writeInsertable(
          _i3.TableInfo<_i3.Table, dynamic>? table,
          _i3.Insertable<dynamic>? insertable,
          {int? startIndex}) =>
      (super.noSuchMethod(
          Invocation.method(#$writeInsertable, [table, insertable],
              {#startIndex: startIndex}),
          returnValue: _FakeGenerationContext_18()) as _i3.GenerationContext);
  @override
  String $expandVar(int? start, int? amount) =>
      (super.noSuchMethod(Invocation.method(#$expandVar, [start, amount]),
          returnValue: '') as String);
  @override
  String toString() => super.toString();
}
