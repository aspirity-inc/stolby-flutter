// Mocks generated by Mockito 5.0.16 from annotations
// in stolby_flutter/test/infrastructure/feature/location/location_repository_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:location/location.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:stolby_flutter/infrastructure/services/local/location/dtos/user_location_dto.dart'
    as _i5;
import 'package:stolby_flutter/infrastructure/services/local/location/location_service.dart'
    as _i2;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [LocationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationService extends _i1.Mock implements _i2.LocationService {
  MockLocationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.PermissionStatus> checkPermission() => (super.noSuchMethod(
          Invocation.method(#checkPermission, []),
          returnValue:
              Future<_i4.PermissionStatus>.value(_i4.PermissionStatus.granted))
      as _i3.Future<_i4.PermissionStatus>);
  @override
  _i3.Future<_i4.PermissionStatus> requestLocationPermission() =>
      (super.noSuchMethod(Invocation.method(#requestLocationPermission, []),
              returnValue: Future<_i4.PermissionStatus>.value(
                  _i4.PermissionStatus.granted))
          as _i3.Future<_i4.PermissionStatus>);
  @override
  _i3.Future<bool> geolocationService() =>
      (super.noSuchMethod(Invocation.method(#geolocationService, []),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Stream<_i5.UserLocationDto> getUserLocation() =>
      (super.noSuchMethod(Invocation.method(#getUserLocation, []),
              returnValue: Stream<_i5.UserLocationDto>.empty())
          as _i3.Stream<_i5.UserLocationDto>);
  @override
  String toString() => super.toString();
}
